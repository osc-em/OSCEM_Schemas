# metamodel_version: 1.7.0
enum FreezingMethodEnum
  {
    plunge_freezing
    high_pressure_freezing
  }

enum OrganizationTypeEnum
  {
    Academic
    Commercial
    Government
    Other
  }

type Acquisition
  {
    nominalDefocus: RangeSI
    calibratedDefocus: RangeSI
    nominalMagnification: Integer
    calibratedMagnification: Integer
    holder: String
    holderCryogen: String
    temperature: RangeSI
    microscopeSoftware: String
    detector: String!
    detectorMode: String
    dosePerMovie: QuantitySI!
    energyFilter: EnergyFilter
    imageSize: ImageSize
    dateTime: Datetime!
    exposureTime: QuantitySI
    cryogen: String
    framesPerMovie: Integer
    gridsImaged: Integer
    imagesGenerated: Integer
    binningCamera: Float!
    pixelSize: QuantitySI!
    specialistOptics: SpecialistOptics
    beamshift: BoundingBox2D
    beamtilt: BoundingBox2D
    imageshift: BoundingBox2DSI
    beamtiltgroups: Integer
    gainrefFlipRotate: String
  }

type AcquisitionTomo
  {
    nominalDefocus: RangeSI
    calibratedDefocus: RangeSI
    nominalMagnification: Integer
    calibratedMagnification: Integer
    holder: String
    holderCryogen: String
    temperature: RangeSI
    microscopeSoftware: String
    detector: String!
    detectorMode: String
    dosePerMovie: QuantitySI!
    energyFilter: EnergyFilter
    imageSize: ImageSize
    dateTime: Datetime!
    exposureTime: QuantitySI
    cryogen: String
    framesPerMovie: Integer
    gridsImaged: Integer
    imagesGenerated: Integer
    binningCamera: Float!
    pixelSize: QuantitySI!
    specialistOptics: SpecialistOptics
    beamshift: BoundingBox2D
    beamtilt: BoundingBox2D
    imageshift: BoundingBox2DSI
    beamtiltgroups: Integer
    gainrefFlipRotate: String
    tiltAxisAngle: Float!
    tiltAngle: TiltAngle!
  }

type Any
  {
  }

type Author
  {
    workStatus: Boolean
    workPhone: String
    orcid: String
    country: String
    role: String
    nameOrg: String
    typeOrg: OrganizationTypeEnum!
    name: String!
    firstName: String!
    email: String!
  }

type BoundingBox2D
  {
    xMin: QuantityValue
    xMax: QuantityValue
    yMin: QuantityValue
    yMax: QuantityValue
  }

type BoundingBox2DSI
  {
    xMinSi: QuantitySI
    xMaxSi: QuantitySI
    yMinSi: QuantitySI
    yMaxSi: QuantitySI
  }

type ChromaticAberrationCorrector
  {
    used: Boolean!
    instrumentType: String!
  }

interface Descriptor
  {
    descriptorName: String!
    descriptorThing: Any
  }

type Descriptors
  {
    descriptorName: String!
    descriptorThing: Any
  }

interface EMDatasetBase
  {
    acquisition: Any
    instrument: Any
    sample: Any
    organizational: Any
  }

type EMDatasetCell
  {
    acquisition: AcquisitionTomo!
    instrument: Instrument!
    sample: SampleCell!
    organizational: Organizational!
  }

type EnergyFilter
  {
    used: Boolean!
    model: String
    widthEnergyFilter: QuantitySI!
  }

type Freezing
  {
    cryogenSampleEnv: String
    method: FreezingMethodEnum
    blotting: Boolean
    humidityEnv: QuantityValue
    temperatureEnv: QuantitySI
    atmosphere: String
    details: String
  }

type Funder
  {
    funderName: String
    typeOrg: OrganizationTypeEnum
    country: String
  }

type Grant
  {
    grantName: String
    startDate: Any
    endDate: Any
    budget: QuantityValue
    projectId: String
    country: String
  }

type GrowthCondition
  {
    media: String
    growthLocation: String
    cellCycle: String
    treatment: String
    atmosphereGrowth: String
    temperatureGrowth: QuantitySI
  }

type ImageSize
  {
    height: Integer
    width: Integer
  }

type Instrument
  {
    microscope: String!
    illumination: String!
    imaging: String!
    electronSource: String!
    accelerationVoltage: QuantitySI!
    c2Aperture: QuantitySI
    cs: QuantitySI!
  }

type Organizational
  {
    grants: [Grant]
    authors: [Author]!
    funder: [Funder]
  }

type Person
  {
    name: String
    firstName: String
    workStatus: Boolean
    email: String
    workPhone: String
  }

type Phaseplate
  {
    used: Boolean!
    instrumentType: String!
  }

type QuantitySI
  {
    unit: String!
    value: Float!
    valueSI: Float
    unitSI: String
    siValue: String!
    siUnit: String!
  }

type QuantityValue
  {
    unit: String!
    value: Float!
  }

type Range
  {
    minimal: QuantityValue
    maximal: QuantityValue
  }

type RangeSI
  {
    minimalSi: QuantitySI
    maximalSi: QuantitySI
  }

type SampleCell
  {
    specimenEnv: SpecimenEnv!
    freezing: Freezing
    thinning: Thinning
    tomogramFeatures: TomogramFeatures
    growthCondition: GrowthCondition
  }

type SampleEnv
  {
    specimenEnv: SpecimenEnv!
    freezing: Freezing
    thinning: Thinning
    tomogramFeatures: TomogramFeatures
  }

type Series
  {
    minimal: QuantityValue
    maximal: QuantityValue
    increment: QuantityValue
  }

type SpecialistOptics
  {
    phaseplate: Phaseplate
    sphericalAberrationCorrector: SphericalAberrationCorrector
    chromaticAberrationCorrector: ChromaticAberrationCorrector
  }

type SpecimenEnv
  {
    organism: [String]!
    tissue: String
    sourceEnv: String
    location: String
    collectionDate: Date
    handling: String
  }

type SphericalAberrationCorrector
  {
    used: Boolean!
    instrumentType: String!
  }

type Thinning
  {
    methodThin: String
    instrumentThin: String
    ionSource: String
    targetThickness: QuantitySI
    liftOut: Boolean
  }

type TiltAngle
  {
    minimal: QuantityValue!
    maximal: QuantityValue!
    increment: QuantityValue!
  }

type TomogramFeatures
  {
    cellularFeatures: String
    organelles: [String]
    mainTarget: String
    detailsTomo: String
  }

