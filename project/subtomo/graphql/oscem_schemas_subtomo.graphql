# metamodel_version: 1.7.0
enum AssemblyEnum
  {
    FILAMENT
    HELICAL_ARRAY
    PARTICLE
  }

enum AxisType
  {
    space
    array
  }

enum MoleculeClassEnum
  {
    CELL
    COMPLEX
    ORGANELLE_OR_CELLULAR_COMPONENT
    RIBOSOME
    TISSUE
    VIRUS
  }

enum OrganizationTypeEnum
  {
    Academic
    Commercial
    Government
    Other
  }

enum TransformationType
  {
    identity
    map_axis
    translation
    scale
    affine
    sequence
  }

type Acquisition
  {
    nominalDefocus: Range
    calibratedDefocus: Range
    nominalMagnification: Integer
    calibratedMagnification: Integer
    holder: String
    holderCryogen: String
    temperature: Range
    microscopeSoftware: String
    detector: String!
    detectorMode: String
    dosePerMovie: Any!
    energyFilter: EnergyFilter
    imageSize: ImageSize
    dateTime: Datetime!
    exposureTime: Any
    cryogen: String
    framesPerMovie: Integer
    gridsImaged: Integer
    imagesGenerated: Integer
    binningCamera: Float!
    pixelSize: Any!
    specialistOptics: SpecialistOptics
    beamshift: BoundingBox2D
    beamtilt: BoundingBox2D
    imageshift: BoundingBox2D
    beamtiltgroups: Integer
    gainrefFlipRotate: String
  }

type AcquisitionMetadataMixin
  {
    nominalTiltAngle: Float
    accumulatedDose: Float
    ctfMetadata: CTFMetadata
  }

type AcquisitionTomo
  {
    nominalDefocus: Range
    calibratedDefocus: Range
    nominalMagnification: Integer
    calibratedMagnification: Integer
    holder: String
    holderCryogen: String
    temperature: Range
    microscopeSoftware: String
    detector: String!
    detectorMode: String
    dosePerMovie: Any!
    energyFilter: EnergyFilter
    imageSize: ImageSize
    dateTime: Datetime!
    exposureTime: Any
    cryogen: String
    framesPerMovie: Integer
    gridsImaged: Integer
    imagesGenerated: Integer
    binningCamera: Float!
    pixelSize: Any!
    specialistOptics: SpecialistOptics
    beamshift: BoundingBox2D
    beamtilt: BoundingBox2D
    imageshift: BoundingBox2D
    beamtiltgroups: Integer
    gainrefFlipRotate: String
    tiltAxisAngle: Float!
    tiltAngle: TiltAngle!
  }

type Affine
  {
    name: String
    input: String
    output: String
    transformationType: TransformationType
    affine: Integer
  }

type Alignment
  {
    projectionAlignments: [ProjectionAlignment]
  }

type Annotation
  {
    path: String
  }

type Any
  {
  }

type Author
  {
    workStatus: Boolean
    workPhone: String
    orcid: String
    country: String
    role: String
    nameOrg: String
    typeOrg: OrganizationTypeEnum!
    lastName: String!
    firstName: String!
    email: String!
  }

type Average
  {
    name: String
    annotations: [Annotation]
    particleMaps: [ParticleMap]
  }

type Axis
  {
    axisName: String!
    axisUnit: String
    axisType: AxisType
  }

type AxisNameMapping
  {
    axis1Name: String
    axis2Name: String
  }

type BoundingBox2D
  {
    xMin: Any
    xMax: Any
    yMin: Any
    yMax: Any
  }

type ChromaticAberrationCorrector
  {
    used: Boolean!
    instrumentType: String!
  }

type CoordinateSystem
  {
    name: String!
    axes: [Axis]!
  }

type CoordinateTransformation
  {
    transformationType: TransformationType
    name: String
    input: String
    output: String
  }

type CoordMetaMixin
  {
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type CTFMetadata
  {
    defocusU: Float
    defocusV: Float
    defocusAngle: Float
  }

type Dataset
  {
    name: String
    regions: [Region]
    averages: [Average]
  }

type DefectFile
  {
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
  }

interface Descriptor
  {
    descriptorName: String!
    descriptorThing: Any
  }

type Descriptors
  {
    descriptorName: String!
    descriptorThing: Any
  }

interface EMDatasetBase
  {
    acquisition: Any
    instrument: Any
    sample: Any
    organizational: Any
  }

type EMDatasetTomo
  {
    processing: Processing
    acquisition: AcquisitionTomo!
    instrument: Instrument!
    sample: Sample!
    organizational: Organizational!
  }

type EnergyFilter
  {
    used: Boolean!
    model: String
    widthEnergyFilter: Any!
  }

type Funder
  {
    funderName: String
    typeOrg: OrganizationTypeEnum
    country: String
  }

type GainFile
  {
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
  }

type Grant
  {
    grantName: String
    startDate: Any
    endDate: Any
    budget: QuantityValue
    projectId: String
    country: String
  }

type Grid
  {
    manufacturer: String
    material: String
    mesh: Float
    filmSupport: Boolean
    filmMaterial: String
    filmTopology: String
    filmThickness: String
    pretreatmentType: String
    pretreatmentTime: Any
    pretreatmentPressure: Any
    pretreatmentAtmosphere: String
  }

type Identity
  {
    name: String
    input: String
    output: String
    transformationType: TransformationType
  }

type Image2D
  {
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type Image3D
  {
    width: Integer
    height: Integer
    depth: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type ImageSize
  {
    heightIm: Integer
    widthIm: Integer
  }

type ImageStack2D
  {
    images2D: [Image2D]
  }

type ImageStack3D
  {
    images3D: [Image3D]
  }

type Instrument
  {
    microscope: String!
    illumination: String!
    imaging: String!
    electronSource: String!
    accelerationVoltage: Any!
    c2Aperture: Any
    cs: Any!
  }

type Ligand
  {
    present: Boolean
    smiles: String
    reference: String
  }

type MapAxis
  {
    name: String
    input: String
    output: String
    transformationType: TransformationType
    mapAxis: [AxisNameMapping]
  }

type Molecule
  {
    nameMol: String!
    molecularType: String
    molecularClass: String
    sequence: String!
    naturalSource: String!
    taxonomyIdSource: String
    expressionSystem: String
    taxonomyIdExpression: String
    geneName: String
  }

type MovieFrame implements AcquisitionMetadataMixin
  {
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
    section: Integer
    nominalTiltAngle: Float
    accumulatedDose: Float
    ctfMetadata: CTFMetadata
  }

type MovieStack
  {
    path: String
    imagesMovie: [MovieFrame]
  }

type MovieStackCollection
  {
    movieStacks: [MovieStackSeries]
    gainFile: GainFile
    defectFile: DefectFile
  }

type MovieStackSeries
  {
    stacks: [MovieStack]
  }

type Organizational
  {
    grants: [Grant]
    authors: [Author]!
    funder: [Funder]
  }

type OverallMolecule
  {
    molecularOverallType: MoleculeClassEnum
    nameSample: String!
    source: String!
    molecularWeight: Any
    assembly: AssemblyEnum
  }

type ParticleMap
  {
    width: Integer
    height: Integer
    depth: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
  }

type Person
  {
    lastName: String
    firstName: String
    workStatus: Boolean
    email: String
    workPhone: String
  }

type Phaseplate
  {
    used: Boolean!
    instrumentType: String!
  }

type PointMatrixSet2D implements CoordMetaMixin
  {
    path: String
    origin2D: Float
    matrix2D: Float
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type PointMatrixSet3D implements CoordMetaMixin
  {
    path: String
    origin3D: Float
    matrix3D: Float
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type PointSet2D implements CoordMetaMixin
  {
    path: String
    origin2D: Float
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type PointSet3D implements CoordMetaMixin
  {
    path: String
    origin3D: Float
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type PointVectorSet2D implements CoordMetaMixin
  {
    path: String
    origin2D: Float
    vector2D: Float
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type PointVectorSet3D implements CoordMetaMixin
  {
    path: String
    origin3D: Float
    vector3D: Float
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type ProbabilityMap2D implements Image2D
  {
    path: String
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type ProbabilityMap3D implements Image3D
  {
    path: String
    width: Integer
    height: Integer
    depth: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type Processing
  {
    region: Region
    average: Average
    movieStackCollection: MovieStackCollection
    dataset: Dataset
  }

type ProjectionAlignment
  {
    name: String
    transformationType: TransformationType
    input: String
    output: String
    sequence: [CoordinateTransformation]
  }

type ProjectionImage implements AcquisitionMetadataMixin
  {
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
    section: Integer
    nominalTiltAngle: Float
    accumulatedDose: Float
    ctfMetadata: CTFMetadata
  }

type QuantitySI
  {
    unit: String!
    value: Float!
    valueSI: Float
    unitSI: String
    siValue: String!
    siUnit: String!
  }

type QuantityValue
  {
    unit: String!
    value: Float!
  }

type Range
  {
    minimal: Any
    maximal: Any
  }

type Region
  {
    annotations: [Annotation]
    movieStackCollections: [MovieStackCollection]
    tiltSeries: [TiltSeries]
    alignments: [Alignment]
    tomograms: [Tomogram]
  }

type Sample
  {
    overallMolecule: OverallMolecule!
    molecule: [Molecule]
    ligands: [Ligand]
    specimen: Specimen
    grid: Grid
  }

type Scale
  {
    name: String
    input: String
    output: String
    transformationType: TransformationType
    scale: [Float]
  }

type SegmentationMask2D implements Image2D
  {
    path: String
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type SegmentationMask3D implements Image3D
  {
    path: String
    width: Integer
    height: Integer
    depth: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

type Sequence
  {
    name: String
    input: String
    output: String
    transformationType: TransformationType
    sequence: [CoordinateTransformation]
  }

type Series
  {
    minimal: Any
    maximal: Any
    increment: Any
  }

type SpecialistOptics
  {
    phaseplate: Phaseplate
    sphericalAberrationCorrector: SphericalAberrationCorrector
    chromaticAberrationCorrector: ChromaticAberrationCorrector
  }

type Specimen
  {
    buffer: String
    concentration: Any
    ph: Float
    vitrification: Boolean
    vitrificationCryogen: String
    humidity: Any
    temperature: Any
    staining: Boolean
    embedding: Boolean
    shadowing: Boolean
  }

type SphericalAberrationCorrector
  {
    used: Boolean!
    instrumentType: String!
  }

type SubProjectionImage
  {
    width: Integer
    height: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
    section: Integer
    nominalTiltAngle: Float
    accumulatedDose: Float
    ctfMetadata: CTFMetadata
    particleIndex: Integer
  }

type TiltAngle
  {
    minimal: Any!
    maximal: Any!
    increment: Any!
  }

type TiltSeries
  {
    imagesTilt: [ProjectionImage]
    path: String
  }

type Tomogram
  {
    width: Integer
    height: Integer
    depth: Integer
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
    path: String
  }

type Translation
  {
    name: String
    input: String
    output: String
    transformationType: TransformationType
    translation: [Float]
  }

type TriMesh implements CoordMetaMixin
  {
    path: String
    coordinateSystems: [CoordinateSystem]
    coordinateTransformations: [CoordinateTransformation]
  }

