# metamodel_version: 1.7.0
enum AssemblyEnum
  {
    FILAMENT
    HELICAL_ARRAY
    PARTICLE
  }

enum MoleculeClassEnum
  {
    CELL
    COMPLEX
    ORGANELLE_OR_CELLULAR_COMPONENT
    RIBOSOME
    TISSUE
    VIRUS
  }

enum OrganizationTypeEnum
  {
    Academic
    Commercial
    Government
    Other
  }

type Acquisition
  {
    nominalDefocus: Range
    calibratedDefocus: Range
    nominalMagnification: Integer
    calibratedMagnification: Integer
    holder: String
    holderCryogen: String
    temperature: Range
    microscopeSoftware: String
    detector: String!
    detectorMode: String
    dosePerMovie: Any!
    energyFilter: EnergyFilter
    imageSize: ImageSize
    dateTime: Datetime!
    exposureTime: Any
    cryogen: String
    framesPerMovie: Integer
    gridsImaged: Integer
    imagesGenerated: Integer
    binningCamera: Float!
    pixelSize: Any!
    specialistOptics: SpecialistOptics
    beamshift: BoundingBox2D
    beamtilt: BoundingBox2D
    imageshift: BoundingBox2D
    beamtiltgroups: Integer
    gainrefFlipRotate: String
  }

type Any
  {
  }

type Astigmatism
  {
    astigmatismHistogram: String
  }

type Author
  {
    workStatus: Boolean
    workPhone: String
    orcid: String
    country: String
    role: String
    nameOrg: String
    typeOrg: OrganizationTypeEnum!
    lastName: String!
    firstName: String!
    email: String!
  }

type BoundingBox2D
  {
    xMin: Any
    xMax: Any
    yMin: Any
    yMax: Any
  }

type ChromaticAberrationCorrector
  {
    used: Boolean!
    instrumentType: String!
  }

type Classes2D
  {
    numberClasses2D: Integer
    particlesPer2Dclass: [Integer]
    imagesClasses2D: String
    resolutionClasses2D: QuantityValue
    descriptors: [Descriptors]
  }

type Classes3D
  {
    numberClasses3D: Integer
    particlesPer3Dclass: [Integer]
    imagesClasses3D: String
    volume: [Volume]
    resolutionClasses3D: QuantityValue
    descriptors: [Descriptors]
  }

type Coordinates
  {
    numberParticles: Integer!
    particlesPerMicrograph: Float
    numSourceMicrographs: Integer
    particlesHistogram: String
    micrographExamples: String
    descriptors: [Descriptors]
  }

type CTFs
  {
    amplitudeContrast: Float
    defocus: Defocus
    resolution: Resolution
    astigmatism: Astigmatism
    descriptors: [Descriptors]
  }

type Defocus
  {
    outputMinDefocus: QuantityValue
    outputMaxDefocus: QuantityValue
    outputAvgDefocus: QuantityValue
    defocusHistogram: String
    defocusMicrographExamples: String
  }

interface Descriptor
  {
    descriptorName: String!
    descriptorThing: Any
  }

type Descriptors
  {
    descriptorName: String!
    descriptorThing: Any
  }

interface EMDatasetBase
  {
    acquisition: Any
    instrument: Any
    sample: Any
    organizational: Any
  }

type EMDatasetSpa
  {
    processing: Processing
    acquisition: Acquisition!
    instrument: Instrument!
    sample: Sample!
    organizational: Organizational!
  }

type EnergyFilter
  {
    used: Boolean!
    model: String
    widthEnergyFilter: Any!
  }

type Funder
  {
    funderName: String
    typeOrg: OrganizationTypeEnum
    country: String
  }

type Grant
  {
    grantName: String
    startDate: Any
    endDate: Any
    budget: QuantityValue
    projectId: String
    country: String
  }

type Grid
  {
    manufacturer: String
    material: String
    mesh: Float
    filmSupport: Boolean
    filmMaterial: String
    filmTopology: String
    filmThickness: String
    pretreatmentType: String
    pretreatmentTime: Any
    pretreatmentPressure: Any
    pretreatmentAtmosphere: String
  }

type ImageSize
  {
    heightIm: Integer
    widthIm: Integer
  }

type Instrument
  {
    microscope: String!
    illumination: String!
    imaging: String!
    electronSource: String!
    accelerationVoltage: Any!
    c2Aperture: Any
    cs: Any!
  }

type IsosurfaceImages
  {
    frontView: String
    sideView: String
    topView: String
  }

type Ligand
  {
    present: Boolean
    smiles: String
    reference: String
  }

type Micrographs
  {
    numberMicrographs: Float!
    descriptors: [Descriptors]
  }

type Molecule
  {
    nameMol: String!
    molecularType: String
    molecularClass: String
    sequence: String!
    naturalSource: String!
    taxonomyIdSource: String
    expressionSystem: String
    taxonomyIdExpression: String
    geneName: String
  }

type Movies
  {
    dosePerImage: QuantityValue
    initialDose: QuantityValue
    gainImage: String
    darkImage: String
    descriptors: [Descriptors]
  }

type Organizational
  {
    grants: [Grant]
    authors: [Author]!
    funder: [Funder]
  }

type OrthogonalSlices
  {
    orthogonalSlicesX: String
    orthogonalSlicesY: String
    orthogonalSlicesZ: String
  }

type OverallMolecule
  {
    molecularOverallType: MoleculeClassEnum
    nameSample: String!
    source: String!
    molecularWeight: Any
    assembly: AssemblyEnum
  }

type Person
  {
    lastName: String
    firstName: String
    workStatus: Boolean
    email: String
    workPhone: String
  }

type Phaseplate
  {
    used: Boolean!
    instrumentType: String!
  }

type Processing
  {
    movies: Movies
    micrographs: Micrographs
    ctfs: CTFs
    coordinates: Coordinates
    classes2D: Classes2D
    classes3D: Classes3D
    volumes: [Volumes]
  }

type QuantitySI
  {
    unit: String!
    value: Float!
    valueSI: Float
    unitSI: String
    siValue: String!
    siUnit: String!
  }

type QuantityValue
  {
    unit: String!
    value: Float!
  }

type Range
  {
    minimal: Any
    maximal: Any
  }

type Resolution
  {
    outputMinResolution: QuantityValue
    outputMaxResolution: QuantityValue
    outputAvgResolution: QuantityValue
    resolutionHistogram: String
  }

type Sample
  {
    overallMolecule: OverallMolecule!
    molecule: [Molecule]
    ligands: [Ligand]
    specimen: Specimen
    grid: Grid
  }

type Series
  {
    minimal: Any
    maximal: Any
    increment: Any
  }

type SpecialistOptics
  {
    phaseplate: Phaseplate
    sphericalAberrationCorrector: SphericalAberrationCorrector
    chromaticAberrationCorrector: ChromaticAberrationCorrector
  }

type Specimen
  {
    buffer: String
    concentration: Any
    ph: Float
    vitrification: Boolean
    vitrificationCryogen: String
    humidity: Any
    temperature: Any
    staining: Boolean
    embedding: Boolean
    shadowing: Boolean
  }

type SphericalAberrationCorrector
  {
    used: Boolean!
    instrumentType: String!
  }

type Volume
  {
    orthogonalSlices: OrthogonalSlices
    isosurfaceImages: IsosurfaceImages
  }

type Volumes
  {
    volumeType: String!
    volNumberParticles: Integer
    size: String
    orthogonalSlices: OrthogonalSlices
    isosurfaceImages: IsosurfaceImages
    volResolution: QuantityValue
    descriptors: [Descriptors]
  }

